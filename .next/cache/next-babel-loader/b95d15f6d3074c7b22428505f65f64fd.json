{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { CHAINLINK_ORACLE_ABI, ETHEREUM_ORACLE_ADDRESS, DEFAULT_AGGREGATOR_ABI } from \"../abis/mainnet.oracle\";\n\nconst getLatestData = (oracle = {}) => {\n  oracle.methods.latestAnswer().call({}, (error, res) => {\n    if (error != null) {\n      console.log(error);\n      return;\n    }\n\n    console.log(\"Latest price was:\", res);\n    return res;\n  });\n};\n\nconst getLatestTimestamp = (oracle = {}) => {\n  oracle.methods.latestTimestamp().call({}, (error, res) => {\n    if (error != null) {\n      console.log(error);\n      return;\n    }\n\n    console.log(\"Latest timestamp for price was:\", res);\n    return res;\n  });\n};\n\nconst initializeOracle = ({\n  currentChain = process.env.INFURA_MAINNET,\n  oracleAddress = ETHEREUM_ORACLE_ADDRESS,\n  aggregatorAbi = DEFAULT_AGGREGATOR_ABI\n}) => {\n  const {\n    0: oracle,\n    1: setOracle\n  } = useState({});\n  useEffect(() => {\n    const web3 = new Web3(new Web3.providers.HttpProvider(`${currentChain}${process.env.infuraID}`));\n    window.web3 = web3;\n    const oracle = new web3.eth.Contract(aggregatorAbi, oracleAddress);\n    setOracle(oracle);\n  }, []);\n  return {\n    oracle\n  };\n};\n\nexport default initializeOracle;","map":{"version":3,"sources":["/Users/tgreco/g-drive/fleek-apps/nextjs-fleek/src/shared/hooks/useInfura.js"],"names":["useEffect","useState","Web3","CHAINLINK_ORACLE_ABI","ETHEREUM_ORACLE_ADDRESS","DEFAULT_AGGREGATOR_ABI","getLatestData","oracle","methods","latestAnswer","call","error","res","console","log","getLatestTimestamp","latestTimestamp","initializeOracle","currentChain","process","env","INFURA_MAINNET","oracleAddress","aggregatorAbi","setOracle","web3","providers","HttpProvider","infuraID","window","eth","Contract"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SACEC,oBADF,EAEEC,uBAFF,EAGEC,sBAHF,QAIO,wBAJP;;AAMA,MAAMC,aAAa,GAAG,CAACC,MAAM,GAAG,EAAV,KAAiB;AACrCA,EAAAA,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8BC,IAA9B,CAAmC,EAAnC,EAAuC,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACrD,QAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA;AACD;;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,GAAjC;AACA,WAAOA,GAAP;AACD,GAPD;AAQD,CATD;;AAWA,MAAMG,kBAAkB,GAAG,CAACR,MAAM,GAAG,EAAV,KAAiB;AAC1CA,EAAAA,MAAM,CAACC,OAAP,CAAeQ,eAAf,GAAiCN,IAAjC,CAAsC,EAAtC,EAA0C,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACxD,QAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA;AACD;;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,GAA/C;AACA,WAAOA,GAAP;AACD,GAPD;AAQD,CATD;;AAWA,MAAMK,gBAAgB,GAAG,CAAC;AACxBC,EAAAA,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,cADH;AAExBC,EAAAA,aAAa,GAAGlB,uBAFQ;AAGxBmB,EAAAA,aAAa,GAAGlB;AAHQ,CAAD,KAInB;AACJ,QAAM;AAAA,OAACE,MAAD;AAAA,OAASiB;AAAT,MAAsBvB,QAAQ,CAAC,EAAD,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,IAAI,GAAG,IAAIvB,IAAJ,CACX,IAAIA,IAAI,CAACwB,SAAL,CAAeC,YAAnB,CAAiC,GAAET,YAAa,GAAEC,OAAO,CAACC,GAAR,CAAYQ,QAAS,EAAvE,CADW,CAAb;AAGAC,IAAAA,MAAM,CAACJ,IAAP,GAAcA,IAAd;AACA,UAAMlB,MAAM,GAAG,IAAIkB,IAAI,CAACK,GAAL,CAASC,QAAb,CAAsBR,aAAtB,EAAqCD,aAArC,CAAf;AACAE,IAAAA,SAAS,CAACjB,MAAD,CAAT;AACD,GAPQ,EAON,EAPM,CAAT;AASA,SAAO;AACLA,IAAAA;AADK,GAAP;AAGD,CAlBD;;AAoBA,eAAeU,gBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport {\n  CHAINLINK_ORACLE_ABI,\n  ETHEREUM_ORACLE_ADDRESS,\n  DEFAULT_AGGREGATOR_ABI,\n} from \"../abis/mainnet.oracle\";\n\nconst getLatestData = (oracle = {}) => {\n  oracle.methods.latestAnswer().call({}, (error, res) => {\n    if (error != null) {\n      console.log(error);\n      return;\n    }\n    console.log(\"Latest price was:\", res);\n    return res;\n  });\n};\n\nconst getLatestTimestamp = (oracle = {}) => {\n  oracle.methods.latestTimestamp().call({}, (error, res) => {\n    if (error != null) {\n      console.log(error);\n      return;\n    }\n    console.log(\"Latest timestamp for price was:\", res);\n    return res;\n  });\n};\n\nconst initializeOracle = ({\n  currentChain = process.env.INFURA_MAINNET,\n  oracleAddress = ETHEREUM_ORACLE_ADDRESS,\n  aggregatorAbi = DEFAULT_AGGREGATOR_ABI,\n}) => {\n  const [oracle, setOracle] = useState({});\n  useEffect(() => {\n    const web3 = new Web3(\n      new Web3.providers.HttpProvider(`${currentChain}${process.env.infuraID}`)\n    );\n    window.web3 = web3;\n    const oracle = new web3.eth.Contract(aggregatorAbi, oracleAddress);\n    setOracle(oracle);\n  }, []);\n\n  return {\n    oracle,\n  };\n};\n\nexport default initializeOracle;\n"]},"metadata":{},"sourceType":"module"}