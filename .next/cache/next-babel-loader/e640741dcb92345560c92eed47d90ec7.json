{"ast":null,"code":"import Bn from \"bignumber.js\";\nimport { compose } from \"ramda\";\nimport { format, fromUnixTime } from \"date-fns\";\nvar timeFormat = \"MMMM do HH:MM:ss\";\n\nvar formatDate = function formatDate(targetFormat) {\n  return function (date) {\n    return format(date, targetFormat);\n  };\n};\n\nvar toMilitaryTime = formatDate(timeFormat);\nvar formatUnixTimestamp = compose(toMilitaryTime, fromUnixTime);\n\nvar shiftBigNumber = function shiftBigNumber(decimals) {\n  return function (bigNumber) {\n    return bigNumber.shiftedBy(decimals);\n  };\n};\n\nvar shiftNumberByEight = shiftBigNumber(-8);\n\nvar toFixedNumber = function toFixedNumber(fixedPoint) {\n  return function (number) {\n    return number.toFixed(fixedPoint);\n  };\n};\n\nvar toTensPlace = toFixedNumber(2);\n\nvar formatBigNumber = function formatBigNumber(x) {\n  return new Bn(x);\n}; // const testNumber = \"39554000000\";\n\n\nvar trace = function trace(label) {\n  return function (val) {\n    console.log(\"\".concat(label, \"::\"), val);\n    return val;\n  };\n};\n\nvar formatBigNumberFn = compose(toTensPlace, shiftNumberByEight, formatBigNumber); //?\n\nvar getLatestTimestamp = function getLatestTimestamp(oracle) {\n  return oracle.methods.latestTimestamp().call({}, function (error, res) {\n    if (error != null) {\n      console.log(error);\n      return;\n    }\n\n    return res;\n  });\n};\n\nexport { formatBigNumberFn, formatUnixTimestamp, getLatestTimestamp };","map":{"version":3,"sources":["/Users/tgreco/g-drive/fleek-apps/nextjs-fleek/src/shared/utils/index.js"],"names":["Bn","compose","format","fromUnixTime","timeFormat","formatDate","targetFormat","date","toMilitaryTime","formatUnixTimestamp","shiftBigNumber","decimals","bigNumber","shiftedBy","shiftNumberByEight","toFixedNumber","fixedPoint","number","toFixed","toTensPlace","formatBigNumber","x","trace","label","val","console","log","formatBigNumberFn","getLatestTimestamp","oracle","methods","latestTimestamp","call","error","res"],"mappings":"AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,UAArC;AAEA,IAAMC,UAAU,GAAG,kBAAnB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,YAAD;AAAA,SAAkB,UAACC,IAAD;AAAA,WAAUL,MAAM,CAACK,IAAD,EAAOD,YAAP,CAAhB;AAAA,GAAlB;AAAA,CAAnB;;AACA,IAAME,cAAc,GAAGH,UAAU,CAACD,UAAD,CAAjC;AACA,IAAMK,mBAAmB,GAAGR,OAAO,CAACO,cAAD,EAAiBL,YAAjB,CAAnC;;AAEA,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD;AAAA,SAAc,UAACC,SAAD;AAAA,WACnCA,SAAS,CAACC,SAAV,CAAoBF,QAApB,CADmC;AAAA,GAAd;AAAA,CAAvB;;AAEA,IAAMG,kBAAkB,GAAGJ,cAAc,CAAC,CAAC,CAAF,CAAzC;;AACA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD;AAAA,SAAgB,UAACC,MAAD;AAAA,WAAYA,MAAM,CAACC,OAAP,CAAeF,UAAf,CAAZ;AAAA,GAAhB;AAAA,CAAtB;;AACA,IAAMG,WAAW,GAAGJ,aAAa,CAAC,CAAD,CAAjC;;AAEA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD;AAAA,SAAO,IAAIrB,EAAJ,CAAOqB,CAAP,CAAP;AAAA,CAAxB,C,CAEA;;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD;AAAA,SAAW,UAACC,GAAD,EAAS;AAChCC,IAAAA,OAAO,CAACC,GAAR,WAAeH,KAAf,SAA0BC,GAA1B;AACA,WAAOA,GAAP;AACD,GAHa;AAAA,CAAd;;AAKA,IAAMG,iBAAiB,GAAG1B,OAAO,CAC/BkB,WAD+B,EAE/BL,kBAF+B,EAG/BM,eAH+B,CAAjC,C,CAIG;;AAEH,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,MAAD,EAAY;AACrC,SAAOA,MAAM,CAACC,OAAP,CAAeC,eAAf,GAAiCC,IAAjC,CAAsC,EAAtC,EAA0C,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC/D,QAAID,KAAK,IAAI,IAAb,EAAmB;AACjBR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA;AACD;;AACD,WAAOC,GAAP;AACD,GANM,CAAP;AAOD,CARD;;AAUA,SAASP,iBAAT,EAA4BlB,mBAA5B,EAAiDmB,kBAAjD","sourcesContent":["import Bn from \"bignumber.js\";\nimport { compose } from \"ramda\";\nimport { format, fromUnixTime } from \"date-fns\";\n\nconst timeFormat = \"MMMM do HH:MM:ss\";\nconst formatDate = (targetFormat) => (date) => format(date, targetFormat);\nconst toMilitaryTime = formatDate(timeFormat);\nconst formatUnixTimestamp = compose(toMilitaryTime, fromUnixTime);\n\nconst shiftBigNumber = (decimals) => (bigNumber) =>\n  bigNumber.shiftedBy(decimals);\nconst shiftNumberByEight = shiftBigNumber(-8);\nconst toFixedNumber = (fixedPoint) => (number) => number.toFixed(fixedPoint);\nconst toTensPlace = toFixedNumber(2);\n\nconst formatBigNumber = (x) => new Bn(x);\n\n// const testNumber = \"39554000000\";\n\nconst trace = (label) => (val) => {\n  console.log(`${label}::`, val);\n  return val;\n};\n\nconst formatBigNumberFn = compose(\n  toTensPlace,\n  shiftNumberByEight,\n  formatBigNumber\n); //?\n\nconst getLatestTimestamp = (oracle) => {\n  return oracle.methods.latestTimestamp().call({}, (error, res) => {\n    if (error != null) {\n      console.log(error);\n      return;\n    }\n    return res;\n  });\n};\n\nexport { formatBigNumberFn, formatUnixTimestamp, getLatestTimestamp };\n"]},"metadata":{},"sourceType":"module"}