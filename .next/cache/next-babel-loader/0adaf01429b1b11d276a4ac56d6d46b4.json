{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { CHAINLINK_ORACLE_ABI, ETHEREUM_ORACLE_ADDRESS, DEFAULT_AGGREGATOR_ABI } from \"../abis/mainnet.oracle\";\n\nvar initializeOracle = function initializeOracle(_ref) {\n  _s();\n\n  var _ref$currentChain = _ref.currentChain,\n      currentChain = _ref$currentChain === void 0 ? process.env.INFURA_MAINNET : _ref$currentChain,\n      _ref$oracleAddress = _ref.oracleAddress,\n      oracleAddress = _ref$oracleAddress === void 0 ? ETHEREUM_ORACLE_ADDRESS : _ref$oracleAddress,\n      _ref$aggregatorAbi = _ref.aggregatorAbi,\n      aggregatorAbi = _ref$aggregatorAbi === void 0 ? DEFAULT_AGGREGATOR_ABI : _ref$aggregatorAbi;\n\n  var _useState = useState({}),\n      oracle = _useState[0],\n      setOracle = _useState[1];\n\n  useEffect(function () {\n    var web3 = new Web3(new Web3.providers.HttpProvider(\"\".concat(currentChain).concat(process.env.infuraID)));\n    window.web3 = web3;\n    var oracle = new web3.eth.Contract(aggregatorAbi, oracleAddress);\n    setOracle(oracle);\n  }, []);\n\n  var getLatestData = function getLatestData() {\n    oracle.methods.latestAnswer().call({}, function (error, res) {\n      if (error != null) {\n        console.log(error);\n        return;\n      }\n\n      console.log(\"Latest price was:\", res);\n      return res;\n    });\n  };\n\n  var getLatestTimestamp = function getLatestTimestamp() {\n    oracle.methods.latestTimestamp().call({}, function (error, res) {\n      if (error != null) {\n        console.log(error);\n        return;\n      }\n\n      console.log(\"Latest timestamp for price was:\", res);\n      return res;\n    });\n  };\n\n  return {\n    oracle: oracle,\n    getLatestData: getLatestData,\n    getLatestTimestamp: getLatestTimestamp\n  };\n};\n\n_s(initializeOracle, \"6ZKh9Zi6DxcbcCG0DH8mNbr3+0M=\");\n\nexport default initializeOracle;","map":{"version":3,"sources":["/Users/tgreco/g-drive/fleek-apps/nextjs-fleek/src/shared/hooks/useInfura.js"],"names":["useEffect","useState","Web3","CHAINLINK_ORACLE_ABI","ETHEREUM_ORACLE_ADDRESS","DEFAULT_AGGREGATOR_ABI","initializeOracle","currentChain","process","env","INFURA_MAINNET","oracleAddress","aggregatorAbi","oracle","setOracle","web3","providers","HttpProvider","infuraID","window","eth","Contract","getLatestData","methods","latestAnswer","call","error","res","console","log","getLatestTimestamp","latestTimestamp"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SACEC,oBADF,EAEEC,uBAFF,EAGEC,sBAHF,QAIO,wBAJP;;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAInB;AAAA;;AAAA,+BAHJC,YAGI;AAAA,MAHJA,YAGI,kCAHWC,OAAO,CAACC,GAAR,CAAYC,cAGvB;AAAA,gCAFJC,aAEI;AAAA,MAFJA,aAEI,mCAFYP,uBAEZ;AAAA,gCADJQ,aACI;AAAA,MADJA,aACI,mCADYP,sBACZ;;AAAA,kBACwBJ,QAAQ,CAAC,EAAD,CADhC;AAAA,MACGY,MADH;AAAA,MACWC,SADX;;AAEJd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMe,IAAI,GAAG,IAAIb,IAAJ,CACX,IAAIA,IAAI,CAACc,SAAL,CAAeC,YAAnB,WAAmCV,YAAnC,SAAkDC,OAAO,CAACC,GAAR,CAAYS,QAA9D,EADW,CAAb;AAGAC,IAAAA,MAAM,CAACJ,IAAP,GAAcA,IAAd;AACA,QAAMF,MAAM,GAAG,IAAIE,IAAI,CAACK,GAAL,CAASC,QAAb,CAAsBT,aAAtB,EAAqCD,aAArC,CAAf;AACAG,IAAAA,SAAS,CAACD,MAAD,CAAT;AACD,GAPQ,EAON,EAPM,CAAT;;AAQA,MAAMS,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BT,IAAAA,MAAM,CAACU,OAAP,CAAeC,YAAf,GAA8BC,IAA9B,CAAmC,EAAnC,EAAuC,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACrD,UAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA;AACD;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,GAAjC;AACA,aAAOA,GAAP;AACD,KAPD;AAQD,GATD;;AAWA,MAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BjB,IAAAA,MAAM,CAACU,OAAP,CAAeQ,eAAf,GAAiCN,IAAjC,CAAsC,EAAtC,EAA0C,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACxD,UAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA;AACD;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,GAA/C;AACA,aAAOA,GAAP;AACD,KAPD;AAQD,GATD;;AAUA,SAAO;AACLd,IAAAA,MAAM,EAANA,MADK;AAELS,IAAAA,aAAa,EAAbA,aAFK;AAGLQ,IAAAA,kBAAkB,EAAlBA;AAHK,GAAP;AAKD,CAxCD;;GAAMxB,gB;;AA0CN,eAAeA,gBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport {\n  CHAINLINK_ORACLE_ABI,\n  ETHEREUM_ORACLE_ADDRESS,\n  DEFAULT_AGGREGATOR_ABI,\n} from \"../abis/mainnet.oracle\";\n\nconst initializeOracle = ({\n  currentChain = process.env.INFURA_MAINNET,\n  oracleAddress = ETHEREUM_ORACLE_ADDRESS,\n  aggregatorAbi = DEFAULT_AGGREGATOR_ABI,\n}) => {\n  const [oracle, setOracle] = useState({});\n  useEffect(() => {\n    const web3 = new Web3(\n      new Web3.providers.HttpProvider(`${currentChain}${process.env.infuraID}`)\n    );\n    window.web3 = web3;\n    const oracle = new web3.eth.Contract(aggregatorAbi, oracleAddress);\n    setOracle(oracle);\n  }, []);\n  const getLatestData = () => {\n    oracle.methods.latestAnswer().call({}, (error, res) => {\n      if (error != null) {\n        console.log(error);\n        return;\n      }\n      console.log(\"Latest price was:\", res);\n      return res;\n    });\n  };\n\n  const getLatestTimestamp = () => {\n    oracle.methods.latestTimestamp().call({}, (error, res) => {\n      if (error != null) {\n        console.log(error);\n        return;\n      }\n      console.log(\"Latest timestamp for price was:\", res);\n      return res;\n    });\n  };\n  return {\n    oracle,\n    getLatestData,\n    getLatestTimestamp,\n  };\n};\n\nexport default initializeOracle;\n"]},"metadata":{},"sourceType":"module"}