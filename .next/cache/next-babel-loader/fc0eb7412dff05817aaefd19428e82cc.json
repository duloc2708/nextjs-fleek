{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { CHAINLINK_ORACLE_ABI, ETHEREUM_ORACLE_ADDRESS, DEFAULT_AGGREGATOR_ABI } from \"../abis/mainnet.oracle\";\n\nvar getLatestData = function getLatestData() {\n  var oracle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  oracle.methods.latestAnswer().call({}, function (error, res) {\n    if (error != null) {\n      console.log(error);\n      return;\n    }\n\n    console.log(\"Latest price was:\", res);\n    return res;\n  });\n};\n\nvar getLatestTimestamp = function getLatestTimestamp() {\n  var oracle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  oracle.methods.latestTimestamp().call({}, function (error, res) {\n    if (error != null) {\n      console.log(error);\n      return;\n    }\n\n    console.log(\"Latest timestamp for price was:\", res);\n    return res;\n  });\n};\n\nvar initWeb3 = function initWeb3(_ref) {\n  _s();\n\n  var _ref$currentChain = _ref.currentChain,\n      currentChain = _ref$currentChain === void 0 ? process.env.INFURA_MAINNET : _ref$currentChain;\n  var web3 = new Web3(new Web3.providers.HttpProvider(\"\".concat(currentChain).concat(process.env.infuraID)));\n  useEffect(function () {\n    window.web3 = web3;\n  }, []);\n  return {\n    web3: web3\n  };\n};\n\n_s(initWeb3, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nvar initializeOracle = function initializeOracle(_ref2) {\n  var _ref2$oracleAddress = _ref2.oracleAddress,\n      oracleAddress = _ref2$oracleAddress === void 0 ? ETHEREUM_ORACLE_ADDRESS : _ref2$oracleAddress,\n      _ref2$aggregatorAbi = _ref2.aggregatorAbi,\n      aggregatorAbi = _ref2$aggregatorAbi === void 0 ? DEFAULT_AGGREGATOR_ABI : _ref2$aggregatorAbi;\n\n  var _initWeb = initWeb3({\n    currentChain: process.env.INFURA_MAINNET\n  }),\n      web3 = _initWeb.web3;\n\n  var oracle = web3.eth.Contract(aggregatorAbi, oracleAddress);\n  return {\n    oracle: oracle\n  };\n};\n\nexport default initializeOracle;","map":{"version":3,"sources":["/Users/tgreco/g-drive/fleek-apps/nextjs-fleek/src/shared/hooks/useInfura.js"],"names":["useEffect","useState","Web3","CHAINLINK_ORACLE_ABI","ETHEREUM_ORACLE_ADDRESS","DEFAULT_AGGREGATOR_ABI","getLatestData","oracle","methods","latestAnswer","call","error","res","console","log","getLatestTimestamp","latestTimestamp","initWeb3","currentChain","process","env","INFURA_MAINNET","web3","providers","HttpProvider","infuraID","window","initializeOracle","oracleAddress","aggregatorAbi","eth","Contract"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SACEC,oBADF,EAEEC,uBAFF,EAGEC,sBAHF,QAIO,wBAJP;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAiB;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;AACrCA,EAAAA,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8BC,IAA9B,CAAmC,EAAnC,EAAuC,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACrD,QAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA;AACD;;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,GAAjC;AACA,WAAOA,GAAP;AACD,GAPD;AAQD,CATD;;AAWA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,GAAiB;AAAA,MAAhBR,MAAgB,uEAAP,EAAO;AAC1CA,EAAAA,MAAM,CAACC,OAAP,CAAeQ,eAAf,GAAiCN,IAAjC,CAAsC,EAAtC,EAA0C,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACxD,QAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA;AACD;;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,GAA/C;AACA,WAAOA,GAAP;AACD,GAPD;AAQD,CATD;;AAWA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,OAAmD;AAAA;;AAAA,+BAAhDC,YAAgD;AAAA,MAAhDA,YAAgD,kCAAjCC,OAAO,CAACC,GAAR,CAAYC,cAAqB;AAClE,MAAMC,IAAI,GAAG,IAAIpB,IAAJ,CACX,IAAIA,IAAI,CAACqB,SAAL,CAAeC,YAAnB,WAAmCN,YAAnC,SAAkDC,OAAO,CAACC,GAAR,CAAYK,QAA9D,EADW,CAAb;AAGAzB,EAAAA,SAAS,CAAC,YAAM;AACd0B,IAAAA,MAAM,CAACJ,IAAP,GAAcA,IAAd;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO;AACLA,IAAAA,IAAI,EAAJA;AADK,GAAP;AAGD,CAVD;;GAAML,Q;;AAYN,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,QAGnB;AAAA,kCAFJC,aAEI;AAAA,MAFJA,aAEI,oCAFYxB,uBAEZ;AAAA,kCADJyB,aACI;AAAA,MADJA,aACI,oCADYxB,sBACZ;;AAAA,iBACaY,QAAQ,CAAC;AAAEC,IAAAA,YAAY,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAA5B,GAAD,CADrB;AAAA,MACIC,IADJ,YACIA,IADJ;;AAGJ,MAAMf,MAAM,GAAGe,IAAI,CAACQ,GAAL,CAASC,QAAT,CAAkBF,aAAlB,EAAiCD,aAAjC,CAAf;AAEA,SAAO;AACLrB,IAAAA,MAAM,EAANA;AADK,GAAP;AAGD,CAXD;;AAaA,eAAeoB,gBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport {\n  CHAINLINK_ORACLE_ABI,\n  ETHEREUM_ORACLE_ADDRESS,\n  DEFAULT_AGGREGATOR_ABI,\n} from \"../abis/mainnet.oracle\";\n\nconst getLatestData = (oracle = {}) => {\n  oracle.methods.latestAnswer().call({}, (error, res) => {\n    if (error != null) {\n      console.log(error);\n      return;\n    }\n    console.log(\"Latest price was:\", res);\n    return res;\n  });\n};\n\nconst getLatestTimestamp = (oracle = {}) => {\n  oracle.methods.latestTimestamp().call({}, (error, res) => {\n    if (error != null) {\n      console.log(error);\n      return;\n    }\n    console.log(\"Latest timestamp for price was:\", res);\n    return res;\n  });\n};\n\nconst initWeb3 = ({ currentChain = process.env.INFURA_MAINNET }) => {\n  const web3 = new Web3(\n    new Web3.providers.HttpProvider(`${currentChain}${process.env.infuraID}`)\n  );\n  useEffect(() => {\n    window.web3 = web3;\n  }, []);\n  return {\n    web3,\n  };\n};\n\nconst initializeOracle = ({\n  oracleAddress = ETHEREUM_ORACLE_ADDRESS,\n  aggregatorAbi = DEFAULT_AGGREGATOR_ABI,\n}) => {\n  const { web3 } = initWeb3({ currentChain: process.env.INFURA_MAINNET });\n\n  const oracle = web3.eth.Contract(aggregatorAbi, oracleAddress);\n\n  return {\n    oracle,\n  };\n};\n\nexport default initializeOracle;\n"]},"metadata":{},"sourceType":"module"}