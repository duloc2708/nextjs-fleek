{"ast":null,"code":"import Web3 from \"web3\";\nimport { CHAINLINK_ORACLE_ABI, ORACLE_ADDRESS } from \"../abis/eth.oracle\";\n\nconst initializeOracle = () => {\n  const web3 = new Web3(new Web3.providers.HttpProvider(`${process.env.infuraMainnet}${process.env.infuraID}`));\n  const oracle = new web3.eth.Contract(CHAINLINK_ORACLE_ABI, ORACLE_ADDRESS);\n\n  const getLatestData = () => {\n    oracle.methods.latestAnswer().call({}, (error, res) => {\n      if (error != null) {\n        console.log(error);\n        return;\n      }\n\n      console.log(\"Latest price was:\", res);\n      return res;\n    });\n  };\n\n  const getLatestTimestamp = () => {\n    oracle.methods.latestTimestamp().call({}, (error, res) => {\n      if (error != null) {\n        console.log(error);\n        return;\n      }\n\n      console.log(\"Latest timestamp for price was:\", res);\n      return res;\n    });\n  };\n\n  return {\n    oracle,\n    getLatestData\n  };\n};\n\nexport default initializeOracle;","map":{"version":3,"sources":["/Users/tgreco/g-drive/fleek-apps/nextjs-fleek/src/shared/hooks/useInfura.js"],"names":["Web3","CHAINLINK_ORACLE_ABI","ORACLE_ADDRESS","initializeOracle","web3","providers","HttpProvider","process","env","infuraMainnet","infuraID","oracle","eth","Contract","getLatestData","methods","latestAnswer","call","error","res","console","log","getLatestTimestamp","latestTimestamp"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,oBAAT,EAA+BC,cAA/B,QAAqD,oBAArD;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAMC,IAAI,GAAG,IAAIJ,IAAJ,CACX,IAAIA,IAAI,CAACK,SAAL,CAAeC,YAAnB,CACG,GAAEC,OAAO,CAACC,GAAR,CAAYC,aAAc,GAAEF,OAAO,CAACC,GAAR,CAAYE,QAAS,EADtD,CADW,CAAb;AAKA,QAAMC,MAAM,GAAG,IAAIP,IAAI,CAACQ,GAAL,CAASC,QAAb,CAAsBZ,oBAAtB,EAA4CC,cAA5C,CAAf;;AACA,QAAMY,aAAa,GAAG,MAAM;AAC1BH,IAAAA,MAAM,CAACI,OAAP,CAAeC,YAAf,GAA8BC,IAA9B,CAAmC,EAAnC,EAAuC,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACrD,UAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA;AACD;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,GAAjC;AACA,aAAOA,GAAP;AACD,KAPD;AAQD,GATD;;AAWA,QAAMG,kBAAkB,GAAG,MAAM;AAC/BX,IAAAA,MAAM,CAACI,OAAP,CAAeQ,eAAf,GAAiCN,IAAjC,CAAsC,EAAtC,EAA0C,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACxD,UAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA;AACD;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,GAA/C;AACA,aAAOA,GAAP;AACD,KAPD;AAQD,GATD;;AAUA,SAAO;AACLR,IAAAA,MADK;AAELG,IAAAA;AAFK,GAAP;AAID,CAhCD;;AAkCA,eAAeX,gBAAf","sourcesContent":["import Web3 from \"web3\";\nimport { CHAINLINK_ORACLE_ABI, ORACLE_ADDRESS } from \"../abis/eth.oracle\";\n\nconst initializeOracle = () => {\n  const web3 = new Web3(\n    new Web3.providers.HttpProvider(\n      `${process.env.infuraMainnet}${process.env.infuraID}`\n    )\n  );\n  const oracle = new web3.eth.Contract(CHAINLINK_ORACLE_ABI, ORACLE_ADDRESS);\n  const getLatestData = () => {\n    oracle.methods.latestAnswer().call({}, (error, res) => {\n      if (error != null) {\n        console.log(error);\n        return;\n      }\n      console.log(\"Latest price was:\", res);\n      return res;\n    });\n  };\n\n  const getLatestTimestamp = () => {\n    oracle.methods.latestTimestamp().call({}, (error, res) => {\n      if (error != null) {\n        console.log(error);\n        return;\n      }\n      console.log(\"Latest timestamp for price was:\", res);\n      return res;\n    });\n  };\n  return {\n    oracle,\n    getLatestData,\n  };\n};\n\nexport default initializeOracle;\n"]},"metadata":{},"sourceType":"module"}